/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/upload': {
    /** Uploads a file to Google Cloud Storage */
    post: {
      parameters: {
        query?: {
          /** @description The type of the file being uploaded */
          type?: type;
        };
      };
      requestBody?: {
        content: {
          'multipart/form-data': {
            files: Record<string, never>;
          };
        };
      };
      responses: {
        /** @description File uploaded successfully */
        200: {
          content: {
            'application/json': {
              message?: string;
              data?: {
                /** @example log/books.png */
                file_name?: string;
                /** @example https://storage.googleapis.com/tbs-dev/log/books.png */
                file_url?: string;
              };
            };
          };
        };
      };
    };
  };
  '/api/upload/generate-signed-url': {
    /** Generate link to upload */
    get: {
      parameters: {
        query: {
          /** @description The file name of the file being uploaded */
          fileName: string;
          /** @description The content type of the file being uploaded */
          contentType: string;
        };
      };
      responses: {
        /** @description Link Generated successfully */
        200: {
          content: {
            'application/json': {
              url?: string;
            };
          };
        };
      };
    };
  };
  '/api/iam/auth/login': {
    /** Login User */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description Email or phone number of the user */
            identifier: string;
            /** @description Password of the user */
            password: string;
          };
        };
      };
      responses: {
        /** @description Verification code sent to the email or phone number */
        200: {
          content: {
            'application/json': components['schemas']['LoginResponse'];
          };
        };
      };
    };
  };
  '/api/iam/auth/forgot-password': {
    /** Forgot Password */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description Email of the user */
            email: string;
            type: components['schemas']['MFAType'];
          };
        };
      };
      responses: {
        /** @description Verification code sent to the email or phone number */
        200: {
          content: {
            'application/json': {
              /** @description Forgot password identifier */
              identifier: string;
              /** @description Masked phone number */
              phone?: string;
            };
          };
        };
      };
    };
  };
  '/api/iam/auth/verify-forgot-password': {
    /** Verify forgot password identifier */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description Forgot password identifier */
            identifier: string;
            /** @description Verification code sent to the email or phone number */
            otp: string;
          };
        };
      };
      responses: {
        /** @description Verify forgot password identifier */
        200: {
          content: {
            'application/json': {
              /** @description Reset password identifier */
              identifier: string;
            };
          };
        };
      };
    };
  };
  '/api/iam/auth/reset-password': {
    /** Reset Password */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description Forgot password identifier */
            identifier: string;
            /** @description New password of the user, must be at least 12 characters long and contain at least one uppercase letter, one lowercase letter, one number and one special character */
            password: string;
          };
        };
      };
      responses: {
        /** @description Reset password successful */
        200: {
          content: {
            'application/json': {
              /** @description Access token */
              accessToken: string;
              /** @description Refresh token */
              refreshToken: string;
            };
          };
        };
      };
    };
  };
  '/api/iam/otp/send': {
    /** Send OTP */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description Email or phone number of the user */
            identifier: string;
            type: components['schemas']['MFAType'];
            purpose: components['schemas']['MFAPurpose'];
          };
        };
      };
      responses: {
        /** @description Verification code sent to the email or phone number */
        200: {
          content: {
            'application/json': components['schemas']['SendOtpResponse'];
          };
        };
      };
    };
  };
  '/api/iam/otp/verify': {
    /** Verify OTP */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description Email or phone number of the user */
            identifier: string;
            /** @description OTP cod */
            otp: string;
            purpose: components['schemas']['MFAPurpose'];
          };
        };
      };
      responses: {
        /** @description Verification code sent to the email or phone number */
        200: {
          content: {
            'application/json': components['schemas']['VerifyOtpResponse'];
          };
        };
      };
    };
  };
  '/api/iam/user/list': {
    /** Get a list of users */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['UserListInput'];
        };
      };
      responses: {
        /** @description Successfully retrieved the user list */
        200: {
          content: {
            'application/json': components['schemas']['UserResponse'];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/iam/user/profile': {
    /** Get User Profiles */
    get: {
      responses: {
        /** @description Successfully retrieved user profile */
        200: {
          content: {
            'application/json': components['schemas']['UserNode'];
          };
        };
      };
    };
  };
  '/api/log/managerLog/': {
    /** Update Log */
    put: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the log to update */
            logId?: number;
            /** @description Updated facility ID */
            facilityId?: number | null;
            /** @description Updated weather condition */
            weather?: string | null;
            /** @description Updated temprature */
            temprature?: number | null;
            /** @description Updated array of open IDs */
            openId?: number[] | null;
            /** @description Updated array of mid IDs */
            midId?: number[] | null;
            /** @description Updated array of close IDs */
            closeId?: number[] | null;
          };
        };
      };
      responses: {
        /** @description Successfully updated the log */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
    /** Add New Log */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the facility */
            facilityId: number;
            /** @description Date in the format of YYYY-MM-DD */
            date: string;
            /** @description Weather condition at the time of the log */
            weather?: string;
            /** @description Temperature at the time of the log */
            temprature?: number;
            /** @description Array of open IDs */
            openId?: number[];
            /** @description Array of mid IDs */
            midId?: number[];
            /** @description Array of close IDs */
            closeId?: number[];
          };
        };
      };
      responses: {
        /** @description Successfully added new log */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/log/managerLog/detail/{logId}': {
    /** Get Log Detail */
    get: {
      parameters: {
        path: {
          /** @description ID of the log to be retrieved */
          logId: string;
        };
      };
      responses: {
        /** @description Successfully retrieved the log */
        200: {
          content: {
            'application/json': components['schemas']['LogResponse'];
          };
        };
      };
    };
  };
  '/api/log/managerLog/{logId}': {
    /** Remove Log */
    delete: {
      parameters: {
        path: {
          /** @description ID of the log to be removed */
          logId: string;
        };
      };
      responses: {
        /** @description Successfully removed the log */
        200: {
          content: {
            'application/json': {
              /** @example Log removed successfully */
              message?: string;
            };
          };
        };
      };
    };
  };
  '/api/log/managerLog/list': {
    /** Get Manager Logs */
    post: {
      requestBody: {
        content: {
          'application/json': {
            filter?: {
              /** @description Facility ID for the logs */
              facilityIds?: number[] | null;
              /** @description Search query for logs */
              searchQuery?: string | null;
              /**
               * Format: date
               * @description Start date for filtering logs
               */
              startDateFilter?: string | null;
              /**
               * Format: date
               * @description End date for filtering logs
               */
              endDateFilter?: string | null;
            };
            metadata?: {
              /** @description Page number for pagination */
              page?: number;
              /** @description Number of items per page */
              size?: number;
              sortBy?: components['schemas']['MangerLogSortBy'];
              sortOrder?: components['schemas']['SortOrder'];
            };
          };
        };
      };
      responses: {
        /** @description Successfully retrieved manager logs */
        200: {
          content: {
            'application/json': components['schemas']['LogListResponse'];
          };
        };
      };
    };
  };
  '/api/log/managerLog/entry': {
    /** Get Log Entries */
    get: {
      parameters: {
        query: {
          /** @description ID of the manager log to retrieve entries for */
          managerLogId: string;
          /** @description Flag to retrieve only the user's entries */
          onlyMine?: boolean;
          /** @description Search parameter */
          search?: string;
        };
      };
      responses: {
        /** @description Successfully retrieved log entries */
        200: {
          content: {
            'application/json': components['schemas']['EntryResponse'];
          };
        };
      };
    };
    /** Update Log Entry */
    put: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the log entry to update */
            entryId?: number;
            /** @description Updated ID of the manager log */
            managerLogId?: number | null;
            /** @description Updated ID of the section */
            sectionId?: number | null;
            /** @description Updated array of media file URLs */
            mediaFiles?: string[] | null;
            mediaType?: components['schemas']['LogEntryType'];
            /** @description Updated description of the log entry */
            description?: string | null;
          };
        };
      };
      responses: {
        /** @description Successfully updated the log entry */
        200: {
          content: {
            'application/json': components['schemas']['LogEntryResponse'];
          };
        };
      };
    };
    /** Add New Log Entry */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the manager log */
            managerLogId?: number;
            /** @description ID of the section */
            sectionId?: number;
            /** @description Array of media file URLs */
            mediaFiles?: string[];
            mediaType?: components['schemas']['LogEntryType'];
            /** @description Description of the log entry */
            description?: string;
          };
        };
      };
      responses: {
        /** @description Successfully added new log entry */
        200: {
          content: {
            'application/json': components['schemas']['LogEntryResponse'];
          };
        };
      };
    };
  };
  '/api/log/managerLog/entry/{entryId}': {
    /** Delete Log Entry */
    delete: {
      parameters: {
        path: {
          /** @description ID of the log entry to be deleted */
          entryId: string;
        };
      };
      responses: {
        /** @description Successfully deleted the log entry */
        200: {
          content: {
            'application/json': {
              /** @example Log entry deleted successfully */
              message?: string;
            };
          };
        };
      };
    };
  };
  '/api/log/managerLog/entry/tagged': {
    /** Get Log Entries Tagged In */
    get: {
      parameters: {
        query: {
          size: number;
          page?: number;
        };
      };
      responses: {
        /** @description Successfully retrieved log entries */
        200: {
          content: {
            'application/json': components['schemas']['TagEntryResponse'];
          };
        };
      };
    };
  };
  '/api/log/managerLog/tags': {
    /** Update tags for a specific log entry */
    put: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the manager log entry */
            managerLogEntryId?: number;
            /** @description Array of user IDs to subscribe */
            userIds?: number[];
          };
        };
      };
      responses: {
        /** @description Successfully updated subscribers */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/log/managerLogSetting': {
    /** Get Settings For Facility */
    get: {
      parameters: {
        query: {
          /** @description The ID of the facility as a string */
          facilityId: string;
        };
      };
      responses: {
        /** @description A list of settings for the facility */
        200: {
          content: {
            'application/json': components['schemas']['ManagerLogSettingResponse'];
          };
        };
        /** @description Bad request if the facilityId is not provided or invalid */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Add a new log setting for a facility */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the facility */
            facilityId?: number;
            /** @description Array of log modules */
            modules?: {
              /** @description Order of the module */
              order?: number;
              /** @description Header of the module */
              header?: string;
              /** @description Array of allowed log entry types */
              allowedTypes?: components['schemas']['LogEntryType'][];
            }[];
          };
        };
      };
      responses: {
        /** @description Successfully added new log setting */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/log/managerLogSetting/module': {
    /** Add a module to a manager log setting */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['LogModule'];
        };
      };
      responses: {
        /** @description Successfully added the module */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/log/managerLogSetting/load': {
    /** Load modules from different facility */
    post: {
      requestBody: {
        content: {
          'application/json': {
            /** @description The id of the facility to load modues to */
            facilityId: number;
            /** @description The id of the facility to load modues from */
            loadFromFacilityId: number;
          };
        };
      };
      responses: {
        /** @description Successfully added the module */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/log/managerLogSetting/module/bulk': {
    /** Update module orders */
    put: {
      requestBody: {
        content: {
          'application/json': {
            /** @description The ID of the log module */
            logModuleId?: number;
            /** @description The new order of the module */
            order?: number;
          }[];
        };
      };
      responses: {
        /** @description Successfully updated the modules */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/log/managerLogSetting/module/{moduleId}': {
    /** Update a module for a facility setting */
    put: {
      parameters: {
        path: {
          /** @description The ID of the module to update */
          moduleId: number;
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['LogModule'];
        };
      };
      responses: {
        /** @description Successfully updated the module */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request (e.g., Module ID not passed or invalid input) */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
    /** Update a module for a facility setting */
    delete: {
      parameters: {
        path: {
          /** @description The ID of the module to update */
          moduleId: number;
        };
      };
      responses: {
        /** @description Successfully updated the module */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request (e.g., Module ID not passed or invalid input) */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/log/managerLogSetting/subscribers': {
    /** Update subscribers for a specific log setting */
    put: {
      requestBody: {
        content: {
          'application/json': {
            /** @description ID of the facility */
            facilityId?: number;
            /** @description Array of user IDs to subscribe */
            userIds?: number[];
          };
        };
      };
      responses: {
        /** @description Successfully updated subscribers */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Bad request */
        400: {
          content: never;
        };
        /** @description Internal server error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/log/media/list': {
    /** Retrieves a list of facility media */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['FacilityMediaListInput'];
        };
      };
      responses: {
        /** @description Successfully retrieved facility media */
        200: {
          content: {
            'application/json': components['schemas']['FacilityMediaListResponse'];
          };
        };
      };
    };
  };
  '/api/log/media': {
    /** Create a new facility media */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateFacilityMediaSchema'];
        };
      };
      responses: {
        /** @description Successfully created facility media */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
    /** Delete a facility media */
    delete: {
      requestBody: {
        content: {
          'application/json': components['schemas']['DeleteMedia'];
        };
      };
      responses: {
        /** @description Successfully deleted facility media */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/log/media/{id}': {
    /** Update a facility media */
    put: {
      parameters: {
        path: {
          /** @description Facility media ID */
          id: number;
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateFacilityMediaSchema'];
        };
      };
      responses: {
        /** @description Successfully updated facility media */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/log/mediaComments/list': {
    /** Retrieves a list of facility media comments */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['FacilityMediaCommentsListInput'];
        };
      };
      responses: {
        /** @description Successfully retrieved facility media comments */
        200: {
          content: {
            'application/json': components['schemas']['FacilityMediaCommentsListResponse'];
          };
        };
      };
    };
  };
  '/api/log/mediaComments': {
    /** Create a new facility media comment */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateFacilityMediaCommentSchema'];
        };
      };
      responses: {
        /** @description Successfully created facility media comment */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/log/mediaComments/{id}': {
    /** Update a facility media comment */
    put: {
      parameters: {
        path: {
          /** @description Facility media comment ID */
          id: number;
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateFacilityMediaCommentSchema'];
        };
      };
      responses: {
        /** @description Successfully updated facility media comment */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
    /** Delete a facility media comment */
    delete: {
      parameters: {
        path: {
          /** @description Facility media comment ID */
          id: number;
        };
      };
      responses: {
        /** @description Successfully deleted facility media comment */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/log/reports': {
    /** Retrieves a report of facilities */
    post: {
      requestBody: {
        content: {
          'application/json': {
            facilities: number[];
            sendVia: components['schemas']['SendVia'];
            /**
             * Format: date
             * @example 2024-3-31
             */
            startDate: string;
          };
        };
      };
      responses: {
        /** @description Return a report of facilities via email/download */
        200: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/organization/facility': {
    /** Retrieves a list of facilities */
    get: {
      responses: {
        /** @description A list of facilities */
        200: {
          content: {
            'application/json': {
              /** @example 1 */
              id?: number;
              /** @example Addams Tavern Westfield */
              facilityName?: string;
              /**
               * Format: date-time
               * @example 2024-02-12T07:46:02.882Z
               */
              createdAt?: string;
              /**
               * Format: date-time
               * @example 2024-02-12T07:46:02.882Z
               */
              updatedAt?: string;
            }[];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/organization/facility/stats': {
    /** Retrieves facility stats based on facility ID and date range */
    post: {
      requestBody: {
        content: {
          'application/json': {
            facilityIds?: number[];
            nullable?: unknown;
            /**
             * Format: date
             * @example 2024-06-01
             */
            startDate?: string | null;
            /**
             * Format: date
             * @example 2024-06-30
             */
            endDate?: string | null;
          };
        };
      };
      responses: {
        /** @description Facility stats retrieved successfully */
        200: {
          content: {
            'application/json': {
              /**
               * Format: date
               * @example 2024-06-01
               */
              date?: string;
              /** @example 8.5 */
              totalHoursWorked?: number;
              /** @example 1500.75 */
              totalMoneyMade?: number;
            }[];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/organization/facility/total': {
    /** Retrieves facility stats based on facility ID and date range */
    post: {
      requestBody: {
        content: {
          'application/json': {
            facilityIds?: (number | null)[];
            /**
             * Format: date
             * @example 2024-06-01
             */
            startDate?: string | null;
            /**
             * Format: date
             * @example 2024-06-30
             */
            endDate?: string | null;
          };
        };
      };
      responses: {
        /** @description Total stats retrieved successfully */
        200: {
          content: {
            'application/json': {
              /** @example 8.5 */
              totalHoursWorked?: number;
              totalMoneyMade?: number;
            };
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/organization/facility/department': {
    /** Retrieves a list of facilities */
    post: {
      requestBody: {
        content: {
          'application/json': {
            facilityIds?: number;
          };
        };
      };
      responses: {
        /** @description A list of facilities */
        200: {
          content: {
            'application/json': {
              /** @example 1 */
              id?: number;
              /** @example Addams Tavern Westfield */
              departmentName?: string;
              /**
               * Format: date-time
               * @example 2024-02-12T07:46:02.882Z
               */
              createdAt?: string;
              /**
               * Format: date-time
               * @example 2024-02-12T07:46:02.882Z
               */
              updatedAt?: string;
            }[];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/organization/feedback/list': {
    /** Retrieves a list of feedback */
    post: {
      requestBody: {
        content: {
          'application/json': {
            filter?: {
              feedbackType?: components['schemas']['FeedbackType'];
              /** @description Filter by read status */
              isRead?: boolean | null;
              /**
               * Format: date
               * @description Start date for filtering feedback
               */
              startDateFilter?: string | null;
              /**
               * Format: date
               * @description End date for filtering feedback
               */
              endDateFilter?: string | null;
              facilityId?: number;
              /** @description Search query for feedback */
              searchQuery?: string | null;
            };
            metadata?: {
              /** @description Page number for pagination */
              page?: number;
              /** @description Number of items per page */
              size?: number;
              /** @description Field to sort by */
              sortBy?: string;
              /**
               * @description Sort order
               * @enum {string}
               */
              sortOrder?: json;
            };
          };
        };
      };
      responses: {
        /** @description Successfully retrieved feedback */
        200: {
          content: {
            'application/json': components['schemas']['FeedbackListResponse'];
          };
        };
      };
    };
  };
  '/api/organization/feedback': {
    /** Create a new feedback */
    post: {
      requestBody: {
        content: {
          'application/json': {
            feedbackType?: components['schemas']['FeedbackType'];
            message?: string;
            facilityId?: number | null;
            contactBy?: components['schemas']['ContactByType'];
            isAnonymous?: boolean;
          };
        };
      };
      responses: {
        /** @description Feedback created successfully */
        201: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
  };
  '/api/organization/feedback/{id}': {
    /** Update a feedback */
    put: {
      parameters: {
        path: {
          /** @description Feedback ID */
          id: number;
        };
      };
      requestBody: {
        content: {
          'application/json': {
            facilityId?: number | null;
            feedbackType?: components['schemas']['FeedbackType'];
            /** @example The service was slow. */
            message?: string | null;
            contactBy?: components['schemas']['ContactByType'];
            /** @example false */
            isAnonymous?: boolean;
            /** @example false */
            isRead?: boolean | null;
          };
        };
      };
      responses: {
        /** @description Feedback updated successfully */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
      };
    };
    /** Delete a feedback */
    delete: {
      parameters: {
        path: {
          /** @description Feedback ID */
          id: number;
        };
      };
      responses: {
        /** @description Feedback updated successfully */
        200: {
          content: {
            'application/json': components['schemas']['BaseResponse'];
          };
        };
        /** @description Feedback not found */
        404: {
          content: never;
        };
        /** @description Internal Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  '/api/users/list': {
    /** Get Employee List */
    post: {
      requestBody: {
        content: {
          'application/json': {
            filter?: {
              /** @description Facility ID for the Employees */
              facilityIds?: number[] | null;
              /** @description Department ID for the Employees */
              departmentIds?: number[] | null;
              /** @description Position ID for the Employees */
              positionIds?: number[] | null;
              /** @description Search query for Employees */
              searchQuery?: string | null;
              /**
               * Format: date
               * @description Start date for filtering Employees
               */
              startDateFilter?: string | null;
              /**
               * Format: date
               * @description End date for filtering Employees
               */
              endDateFilter?: string | null;
            };
            metadata?: {
              /** @description Page number for pagination */
              page?: number;
              /** @description Number of items per page */
              size?: number;
              sortBy?: components['schemas']['EmployeeSortBy'];
              sortOrder?: components['schemas']['SortOrder'];
            };
          };
        };
      };
      responses: {
        /** @description Successfully retrieved manager logs */
        200: {
          content: {
            'application/json': components['schemas']['LogListResponse'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserFilterInput: {
      userType?: components['schemas']['UserType'];
      searchQuery?: string | null;
      facilityId?: number | null;
    };
    UserMetadata: {
      page?: number;
      size?: number;
      /** @default createdAt */
      sortBy?: string;
      sortOrder?: components['schemas']['SortOrder'];
    };
    UserListInput: {
      filter?: components['schemas']['UserFilterInput'];
      metadata?: components['schemas']['UserMetadata'];
    };
    BaseResponse: {
      success: boolean;
      entityId?: number;
    };
    LoginResponse: {
      success: boolean;
      identifier: string;
      phone: string;
    };
    Log: {
      metadata: {
        page: number;
        size: number;
        totalDocs: number;
      };
    };
    LogEntry: {
      id: number;
    };
    LogEntryResponse: {
      success: boolean;
    };
    SendOtpResponse: {
      success: boolean;
      message: string;
    };
    VerifyOtpResponse: {
      success: boolean;
      token: string;
    };
    /**
     * @description Send via
     * @example download
     * @enum {string}
     */
    SendVia: SendVia;
    /**
     * @description Type of authentication
     * @enum {string}
     */
    MFAType: MFAType;
    /**
     * @description Purpose of the OTP
     * @enum {string}
     */
    MFAPurpose: MFAPurpose;
    /**
     * @description Manager log sort options
     * @enum {string}
     */
    MangerLogSortBy: MangerLogSortBy;
    /**
     * @description Manager log sort options
     * @enum {string}
     */
    EmployeeSortBy: EmployeeSortBy;
    /**
     * @description SortOrder
     * @enum {string}
     */
    SortOrder: SortOrder;
    /**
     * @description UserType
     * @enum {string}
     */
    UserType: UserType;
    /**
     * @description ContactByType
     * @enum {string}
     */
    ContactByType: ContactByType;
    /**
     * @description FeedbackType
     * @enum {string}
     */
    FeedbackType: FeedbackType;
    /**
     * @description Log entry type
     * @enum {string}
     */
    LogEntryType: LogEntryType;
    LogUser: {
      id: number;
      firstName: string;
      lastName: string;
      phoneNumber?: string;
      email?: string;
    };
    LogResponse: {
      id?: number;
      facilityId?: number;
      weather?: string;
      temprature?: number | null;
      /** Format: date-time */
      createdAt?: string;
      facilityName?: string;
      open?: components['schemas']['LogUser'][];
      mid?: components['schemas']['LogUser'][];
      close?: components['schemas']['LogUser'][];
    };
    MetadataResponse: {
      page: number;
      size: number;
      totalDocs: number;
    };
    LogListResponse: {
      nodes: components['schemas']['LogResponse'][];
      metadata: components['schemas']['MetadataResponse'];
    };
    Module: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      facilityId: number;
      /** Format: int32 */
      order: number;
      headerTitle: string;
      allowedTypes: components['schemas']['LogEntryType'][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    ManagerLogSettingResponse: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      facilityId: number;
      modules: components['schemas']['Module'][];
      subscribers?: components['schemas']['MinimalUserNode'][];
    };
    LogModule: {
      /** @description ID of the manager log setting (optional) */
      facilityId?: number;
      /** @description Order of the module */
      order?: number;
      /** @description Header of the module */
      header?: string;
      /** @description Array of allowed log entry types */
      allowedTypes?: components['schemas']['LogEntryType'][];
    };
    ManagerLogEntry: {
      id?: number;
      managerLogId?: number;
      sectionId?: number;
      sectionName?: string;
      facilityName?: string;
      mediaFiles?: string[];
      /** @description media file type */
      mediaType?: components['schemas']['LogEntryType'];
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      tags?: components['schemas']['LogUser'][];
      user?: components['schemas']['LogUser'];
    };
    TaggedEntry: {
      id?: number;
      managerLogId?: number;
      sectionId?: number;
      facilityId?: number;
      sectionName?: string;
      facilityName?: string;
      mediaFiles?: string[];
      /** @description media file type */
      mediaType?: components['schemas']['LogEntryType'];
      description?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    EntryResponse: {
      modules?: components['schemas']['Module'][];
      entries?: components['schemas']['ManagerLogEntries'];
    };
    TagEntryResponse: {
      metadata?: components['schemas']['MetadataResponse'];
      entries?: components['schemas']['TaggedEntry'][];
    };
    ManagerLogEntries: components['schemas']['ManagerLogEntry'][];
    FeedbackListResponse: {
      nodes: components['schemas']['FeedbackResponse'][];
      metadata: components['schemas']['MetadataResponse'];
    };
    FeedbackResponse: {
      /** @example 1 */
      id?: number;
      feedbackType?: components['schemas']['FeedbackType'];
      facilityName?: string;
      facilityId?: number;
      /** @example The service was slow. */
      message?: string;
      /** @example John Doe */
      createdByName?: string;
      /** @example false */
      isAnonymous?: boolean;
      contactBy?: components['schemas']['ContactByType'];
      /** @example false */
      isRead?: boolean;
      /**
       * Format: date-time
       * @example 2024-02-12T07:46:02.882Z
       */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    MinimalUserNode: {
      id: number;
      organizationId?: number;
      email: string;
      firstName: string;
      lastName: string;
      phoneNumber: string;
      profilePicture?: string | null;
    };
    UserNode: {
      id: number;
      organizationId: number;
      email: string;
      firstName: string;
      lastName: string;
      phoneNumber: string;
      profilePicture?: string | null;
      city?: string | null;
      state?: string | null;
      address?: string | null;
      zipCode?: string | null;
      roleId?: number | null;
      status?: string | null;
      /** Format: date-time */
      hireDate?: string;
      /** Format: date-time */
      dob?: string | null;
      hasSuperUserAccess?: boolean | null;
      /** Format: date-time */
      createdAt?: string | null;
      /** Format: date-time */
      updatedAt?: string | null;
    };
    Metadata: {
      page: number;
      size: number;
      totalDocs: number;
    };
    UserResponse: {
      nodes: components['schemas']['UserNode'][];
      metadata: components['schemas']['Metadata'];
    };
    FacilityMediaListInput: {
      filter?: {
        facilityIds?: number[] | null;
        organizationId?: number | null;
        type?: components['schemas']['MediaType'];
        /** Format: date */
        startDateFilter?: string | null;
        /** Format: date */
        endDateFilter?: string | null;
        searchQuery?: string | null;
      };
      metadata?: {
        /** @default 1 */
        page?: number;
        /** @default 10 */
        size?: number;
        /** @default createdAt */
        sortBy?: string;
        /**
         * @default desc
         * @enum {string}
         */
        sortOrder?: FacilityMediaListInput;
      };
    };
    FacilityMediaResponse: {
      id?: number;
      profilePicture?: string;
      fullName?: string;
      facilityId?: number;
      organizationId?: number;
      mediaUrl?: string;
      mediaName?: string;
      type?: components['schemas']['MediaType'];
      commentCount?: number;
      createdBy?: number;
      updatedBy?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    FacilityMediaListResponse: {
      nodes: components['schemas']['FacilityMediaResponse'][];
      metadata: components['schemas']['MetadataResponse'];
    };
    CreateFacilityMediaSchema: {
      facilityId?: number;
      organizationId?: number;
      mediaUrl?: string;
      mediaName?: string;
    };
    DeleteMedia: {
      mediaIds?: number[];
    };
    UpdateFacilityMediaSchema: {
      facilityId?: number | null;
      organizationId?: number | null;
      mediaUrl?: string | null;
      mediaName?: string | null;
    };
    FacilityMediaCommentsListInput: {
      filter?: {
        facilityMediaId?: number | null;
        /** Format: date */
        startDateFilter?: string | null;
        /** Format: date */
        endDateFilter?: string | null;
        searchQuery?: string | null;
      };
      metadata?: {
        /** @default 1 */
        page?: number;
        /** @default 10 */
        size?: number;
        /** @default createdAt */
        sortBy?: string;
        /**
         * @default desc
         * @enum {string}
         */
        sortOrder?: FacilityMediaCommentsListInput;
      };
    };
    FacilityMediaCommentResponse: {
      id?: number;
      facilityMediaId?: number;
      createdBy?: number;
      profilePicture?: string;
      fullName?: string;
      comment?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    FacilityMediaCommentsListResponse: {
      nodes: components['schemas']['FacilityMediaCommentResponse'][];
      metadata: components['schemas']['MetadataResponse'];
    };
    CreateFacilityMediaCommentSchema: {
      facilityMediaId?: number;
      comment?: string;
    };
    UpdateFacilityMediaCommentSchema: {
      comment?: string | null;
    };
    /**
     * @description Media type
     * @enum {string}
     */
    MediaType: MediaType;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;

export enum type {
  Log = 'log',
  General = 'general',
}

export enum json {
  Asc = 'asc',
  Desc = 'desc',
}

export enum SendVia {
  Email = 'email',
  Download = 'download',
}

export enum MFAType {
  Email = 'EMAIL',
  Sms = 'SMS',
}

export enum MFAPurpose {
  Login = 'LOGIN',
  Register = 'REGISTER',
  Reset = 'RESET',
}

export enum MangerLogSortBy {
  CreatedAt = 'createdAt',
  FacilityName = 'facilityName',
  Weather = 'weather',
  Temprature = 'temprature',
}

export enum EmployeeSortBy {
  CreatedAt = 'createdAt',
  FacilityName = 'facilityName',
  Name = 'name',
}

export enum SortOrder {
  Asc = 'ASC',
  Desc = 'DESC',
}

export enum UserType {
  Manager = 'MANAGER',
}

export enum ContactByType {
  Email = 'EMAIL',
  Phone = 'PHONE',
}

export enum FeedbackType {
  App = 'APP',
  Work = 'WORK',
}

export enum LogEntryType {
  Album = 'ALBUM',
  Video = 'VIDEO',
  Document = 'DOCUMENT',
  Link = 'LINK',
  TextImage = 'TEXT_IMAGE',
}

export enum FacilityMediaListInput {
  Asc = 'asc',
  Desc = 'desc',
}

export enum FacilityMediaCommentsListInput {
  Asc = 'asc',
  Desc = 'desc',
}

export enum MediaType {
  Log = 'LOG',
  General = 'GENERAL',
}
